#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ARQV30 Enhanced v2.0 - Visual Proofs Generator
Gerador de Provas Visuais Instant√¢neas
"""

import time
import random
import logging
import json
import re
from typing import Dict, List, Any, Optional
from datetime import datetime
from services.ai_manager import ai_manager
from services.auto_save_manager import salvar_etapa, salvar_erro
from services.google_api_rotation import google_api_rotation

logger = logging.getLogger(__name__)

# Usa a inst√¢ncia global do rotador de chaves da API do Google
google_api_rotator = google_api_rotation

class VisualProofsGenerator:
    """Gerador de Provas Visuais Instant√¢neas"""

    def __init__(self):
        """Inicializa o gerador de provas visuais"""
        self.proof_types = self._load_proof_types()
        self.visual_elements = self._load_visual_elements()

        logger.info("Visual Proofs Generator inicializado")

    def _load_proof_types(self) -> Dict[str, Dict[str, Any]]:
        """Carrega tipos de provas visuais"""
        return {
            'antes_depois': {
                'nome': 'Transforma√ß√£o Antes/Depois',
                'objetivo': 'Mostrar transforma√ß√£o clara e mensur√°vel',
                'impacto': 'Alto',
                'facilidade': 'M√©dia'
            },
            'comparacao_competitiva': {
                'nome': 'Compara√ß√£o vs Concorr√™ncia',
                'objetivo': 'Demonstrar superioridade clara',
                'impacto': 'Alto',
                'facilidade': 'Alta'
            },
            'timeline_resultados': {
                'nome': 'Timeline de Resultados',
                'objetivo': 'Mostrar progress√£o temporal',
                'impacto': 'M√©dio',
                'facilidade': 'Alta'
            },
            'social_proof_visual': {
                'nome': 'Prova Social Visual',
                'objetivo': 'Valida√ß√£o atrav√©s de terceiros',
                'impacto': 'Alto',
                'facilidade': 'M√©dia'
            },
            'demonstracao_processo': {
                'nome': 'Demonstra√ß√£o do Processo',
                'objetivo': 'Mostrar como funciona na pr√°tica',
                'impacto': 'M√©dio',
                'facilidade': 'Baixa'
            }
        }

    def _load_visual_elements(self) -> Dict[str, List[str]]:
        """Carrega elementos visuais dispon√≠veis"""
        return {
            'graficos': ['Barras', 'Linhas', 'Pizza', '√Årea', 'Dispers√£o'],
            'comparacoes': ['Lado a lado', 'Sobreposi√ß√£o', 'Timeline', 'Tabela'],
            'depoimentos': ['V√≠deo', 'Texto', '√Åudio', 'Screenshot'],
            'demonstracoes': ['Screencast', 'Fotos', 'Infogr√°fico', 'Anima√ß√£o'],
            'dados': ['N√∫meros', 'Percentuais', 'Valores', 'M√©tricas']
        }

    def generate_comprehensive_proofs(self, avatar_data: Dict[str, Any], context_data: Dict[str, Any] = None, drivers: List[Dict] = None, session_id: str = None) -> Dict[str, Any]:
        """Gera provas visuais abrangentes e detalhadas"""
        try:
            logger.info("üé≠ Gerando provas visuais abrangentes...")

            if not context_data:
                context_data = {}

            segmento = context_data.get('segmento', 'mercado')
            produto = context_data.get('produto', 'produto')

            # Verifica se as chaves da API do Google est√£o configuradas
            if not google_api_rotator.is_google_api_available():
                logger.error("‚ùå Chaves Google API n√£o configuradas. N√£o √© poss√≠vel gerar provas visuais.")
                return {
                    'success': False,
                    'error': 'Google API keys not configured.',
                    'message': 'Provedor google desabilitado temporariamente devido √† falta de chaves API.'
                }

            # Conceitos para provas visuais
            conceitos_base = [
                f"Eficacia do {produto}",
                f"Transformacao no {segmento}",
                "Urgencia de acao",
                "Escassez temporal",
                "Prova social massiva",
                "Autoridade no mercado",
                "Simplicidade do metodo"
            ]

            provas_geradas = {}

            # Gera provas para cada conceito
            for i, conceito in enumerate(conceitos_base, 1):
                try:
                    # Tenta gerar com IA, se falhar, usa fallback
                    prova = self._generate_single_prova_with_ai(conceito, avatar_data, context_data)
                    if prova:
                        prova_key = f"prova_{i}_{conceito.lower().replace(' ', '_')}"
                        provas_geradas[prova_key] = prova
                        logger.info(f"‚úÖ Prova visual {i} gerada: {conceito}")
                    else:
                        # Fallback para prova basica se IA falhar ou n√£o retornar algo v√°lido
                        logger.warning(f"‚ö†Ô∏è IA falhou para '{conceito}', usando prova b√°sica.")
                        provas_geradas[f"prova_{i}_basica"] = self._create_basic_prova(conceito, segmento, produto)

                except Exception as e:
                    logger.error(f"‚ùå Erro ao processar gera√ß√£o para prova {i} ('{conceito}'): {e}")
                    # Fallback em caso de exce√ß√£o geral durante a gera√ß√£o
                    provas_geradas[f"prova_{i}_fallback"] = self._create_basic_prova(conceito, segmento, produto)

            # Valida√ß√£o e melhoria das provas geradas
            provas_validadas = {}
            for key, prova in provas_geradas.items():
                # Verifica se a prova tem a estrutura esperada antes de validar a qualidade
                if isinstance(prova, dict) and self._validate_prova_quality(prova, context_data):
                    provas_validadas[key] = prova
                else:
                    logger.warning(f"Prova '{key}' falhou na valida√ß√£o de qualidade ou estrutura. Tentando criar prova b√°sica como fallback.")
                    # Se a prova gerada (mesmo a b√°sica) n√£o passar na valida√ß√£o, cria uma nova prova b√°sica.
                    provas_validadas[f"{key}_fallback_validacao"] = self._create_basic_prova(prova.get('conceito_alvo', 'conceito desconhecido'), segmento, produto)

            # Garante um m√≠nimo de 5 provas, adicionando mais se necess√°rio
            if len(provas_validadas) < 5:
                logger.info(f"Gerando provas adicionais para atingir o m√≠nimo de 5. Atualmente: {len(provas_validadas)}")
                for i in range(len(provas_validadas), 5):
                    conceito_extra = f"Benef√≠cio adicional {i+1} para {produto}"
                    # Cria uma prova b√°sica para os conceitos adicionais
                    provas_validadas[f"prova_extra_{i+1}"] = self._create_basic_prova(conceito_extra, segmento, produto)

            return {
                'success': True,
                'total_provas': len(provas_validadas),
                'provas_visuais': provas_validadas,
                'segmento': segmento,
                'produto': produto,
                'metadata': {
                    'generated_at': datetime.now().isoformat(),
                    'ai_generated': len([p for p in provas_validadas.values() if p.get('fonte') == 'ai_generated']),
                    'fallback_generated': len([p for p in provas_validadas.values() if p.get('fallback_mode')])
                }
            }

        except Exception as e:
            logger.error(f"‚ùå Erro critico ao gerar provas visuais abrangentes: {e}")
            # Cria provas de emerg√™ncia se ocorrer um erro cr√≠tico geral
            return {
                'success': False,
                'error': str(e),
                'fallback_provas': self._create_emergency_provas(avatar_data, context_data)
            }

    def _create_emergency_provas(self, avatar_data: Dict[str, Any], context_data: Dict[str, Any]) -> Dict[str, Any]:
        """Cria provas de emerg√™ncia quando tudo falha"""
        segmento = context_data.get('segmento', 'mercado')
        produto = context_data.get('produto', 'produto')

        return {
            'prova_emergencia_1': self._create_basic_prova("Eficacia comprovada", segmento, produto),
            'prova_emergencia_2': self._create_basic_prova("Transformacao real", segmento, produto),
            'prova_emergencia_3': self._create_basic_prova("Resultados garantidos", segmento, produto)
        }

    def _validate_prova_quality(self, prova: Dict[str, Any], context_data: Dict[str, Any]) -> bool:
        """Valida a qualidade e relev√¢ncia de uma prova visual"""
        if not isinstance(prova, dict):
            logger.warning(f"Tentativa de validar um objeto que n√£o √© um dicion√°rio: {prova}")
            return False

        # Verifica se possui elementos essenciais
        required_keys = ['nome', 'conceito_alvo', 'tipo_prova', 'experimento', 'materiais', 'roteiro_completo', 'metricas_sucesso']
        if not all(key in prova for key in required_keys):
            logger.warning(f"Prova com chaves faltando: {prova.get('nome', 'Desconhecido')}")
            return False

        # Verifica se o conceito alvo est√° relacionado ao contexto
        segmento = context_data.get('segmento', '').lower()
        produto = context_data.get('produto', '').lower()
        conceito_alvo = prova.get('conceito_alvo', '').lower()

        if segmento and segmento not in conceito_alvo and \
           produto and produto not in conceito_alvo:
            logger.warning(f"Prova fora de contexto: {prova.get('nome', 'Desconhecido')}")
            return False

        # Verifica se h√° materiais e roteiro descritos
        if not prova.get('materiais') or not prova.get('roteiro_completo'):
            logger.warning(f"Prova sem materiais ou roteiro: {prova.get('nome', 'Desconhecido')}")
            return False

        # Verifica se 'materiais' √© uma lista n√£o vazia
        if not isinstance(prova.get('materiais'), list) or not prova.get('materiais'):
            logger.warning(f"Prova com 'materiais' inv√°lido: {prova.get('nome', 'Desconhecido')}")
            return False

        # Verifica se 'roteiro_completo' √© um dicion√°rio com as chaves esperadas
        roteiro = prova.get('roteiro_completo')
        if not isinstance(roteiro, dict) or not all(k in roteiro for k in ['preparacao', 'execucao', 'impacto_esperado']):
            logger.warning(f"Prova com 'roteiro_completo' inv√°lido: {prova.get('nome', 'Desconhecido')}")
            return False

        # Verifica se 'metricas_sucesso' √© uma lista n√£o vazia
        if not isinstance(prova.get('metricas_sucesso'), list) or not prova.get('metricas_sucesso'):
            logger.warning(f"Prova com 'metricas_sucesso' inv√°lido: {prova.get('nome', 'Desconhecido')}")
            return False


        return True

    def _generate_single_prova_with_ai(self, conceito: str, avatar_data: Dict[str, Any], context_data: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """Gera uma √∫nica prova visual usando IA"""
        try:
            segmento = context_data.get('segmento', 'neg√≥cios')
            produto = context_data.get('produto', 'produto')

            proof_type_info = self._select_best_proof_type(conceito, avatar_data)

            # Prompt para a IA
            prompt = f"""
Crie uma prova visual espec√≠fica e convincente para o conceito: "{conceito}"

CONTEXTO:
- Segmento: {segmento}
- Produto: {produto}
- Avatar: Dores: {avatar_data.get('dores_viscerais', [])}, Desejos: {avatar_data.get('desejos_secretos', [])}

TIPO DE PROVA SUGERIDO: {proof_type_info['nome']}
OBJETIVO DA PROVA: {proof_type_info['objetivo']}
IMPACTO ESPERADO: {proof_type_info['impacto']}

FORMATO DE SA√çDA: JSON v√°lido contendo as chaves:
- nome: T√≠tulo da prova (Ex: "PROVI X: [T√≠tulo Descritivo]")
- conceito_alvo: O conceito que a prova demonstra (igual ao input)
- tipo_prova: O tipo de prova selecionado (Ex: "{proof_type_info['nome']}")
- experimento: Descri√ß√£o detalhada do que ser√° demonstrado visualmente. Seja espec√≠fico sobre os elementos visuais.
- materiais: Lista de materiais visuais necess√°rios (Ex: ["Gr√°fico de barras comparativo", "Screenshot de dashboard", "V√≠deo curto de depoimento"]). Seja espec√≠fico.
- roteiro_completo: Dicion√°rio com as chaves "preparacao", "execucao", "impacto_esperado". Descreva as etapas de forma clara e objetiva.
- metricas_sucesso: Lista de m√©tricas para avaliar o sucesso da prova (Ex: ["Redu√ß√£o de obje√ß√µes", "Aumento de engajamento"]).
- ai_generated: true (indica que foi gerado por IA)

AJUSTE O PROMPT PARA SER MAIS ESPEC√çFICO E GERAR UM JSON MAIS DETALHADO E ACION√ÅVEL.
Seja criativo e use os dados do avatar para personalizar a prova.
"""

            response = ai_manager.generate_analysis(prompt, max_tokens=1000)

            if response:
                proof_data = self._process_ai_response(response, conceito)
                if proof_data:
                    # Valida√ß√£o b√°sica das chaves obrigat√≥rias antes de retornar
                    if self._validate_prova_quality(proof_data, context_data):
                        proof_data['fonte'] = 'ai_generated' # Marca como gerado por IA
                        return proof_data
                    else:
                        logger.warning(f"Prova gerada por IA falhou na valida√ß√£o interna para o conceito '{conceito}'. Retornando None.")
                        return None
                else:
                    logger.warning(f"IA n√£o retornou resposta v√°lida ou JSON para o conceito '{conceito}'.")
                    # Se a IA falhar em retornar um JSON v√°lido, tenta gerar uma prova de fallback
                    return self._create_fallback_visual_proof(conceito, context_data)
            else:
                logger.warning(f"IA n√£o retornou resposta para o conceito '{conceito}'.")
                # Se a IA n√£o retornar nada, tamb√©m tenta gerar uma prova de fallback
                return self._create_fallback_visual_proof(conceito, context_data)

        except Exception as e:
            logger.error(f"Erro ao gerar prova visual com IA para o conceito '{conceito}': {e}")
            # Retorna uma prova de fallback em caso de qualquer exce√ß√£o durante a gera√ß√£o com IA
            return self._create_fallback_visual_proof(conceito, context_data)

    def _process_ai_response(self, response: str, conceito: str) -> Optional[Dict[str, Any]]:
        """Processa resposta da IA para extrair prova visual"""

        try:
            # Valida tipo da resposta
            if not isinstance(response, str):
                logger.warning(f"‚ö†Ô∏è Resposta da IA n√£o √© string: {type(response)}")
                return None

            # Tenta extrair JSON usando regex mais robusto
            # Busca por ```json ... ``` ou apenas {...}
            json_match = re.search(r'```json\s*(\{.*?\})\s*```', response, re.DOTALL | re.IGNORECASE)
            if not json_match:
                json_match = re.search(r'\{.*\}', response, re.DOTALL) # Busca por qualquer JSON simples

            if json_match:
                json_str = json_match.group(1) if json_match.groups() else json_match.group(0)
                prova_data = json.loads(json_str)

                # Valida se √© dicion√°rio
                if not isinstance(prova_data, dict):
                    logger.warning(f"‚ö†Ô∏è JSON extra√≠do n√£o √© um dicion√°rio para o conceito '{conceito}': {type(prova_data)}")
                    return None

                # Valida estrutura m√≠nima esperada
                required_fields = ['nome', 'conceito_alvo', 'tipo_prova', 'experimento']
                if all(field in prova_data for field in required_fields):
                    # Adiciona detalhes caso existam, ou cria um placeholder
                    prova_data['detalhes'] = self._extrair_detalhes_prova(response)
                    return prova_data
                else:
                    missing = [f for f in required_fields if f not in prova_data]
                    logger.warning(f"‚ö†Ô∏è Campos obrigat√≥rios ausentes no JSON para '{conceito}': {missing}")
                    return None

            logger.warning(f"Nenhum bloco JSON encontrado na resposta da IA para o conceito '{conceito}'.")
            return None

        except json.JSONDecodeError as e:
            logger.error(f"Erro de decodifica√ß√£o JSON para o conceito '{conceito}': {str(e)}")
            return None
        except Exception as e:
            logger.error(f"Erro ao processar resposta da IA para o conceito '{conceito}': {str(e)}")
            return None

    def _extrair_detalhes_prova(self, response_text: str) -> Dict[str, Any]:
        """Extrai detalhes adicionais da resposta da IA que n√£o s√£o estritamente o JSON principal."""
        detalhes = {}
        # Exemplo: Extrair informa√ß√µes de "impacto esperado" se presentes fora do JSON
        impacto_match = re.search(r"IMPACTO ESPERADO:\s*(.*?)(?:\n|$)", response_text, re.IGNORECASE)
        if impacto_match:
            detalhes['impacto_esperado'] = impacto_match.group(1).strip()
        return detalhes


    def _select_best_proof_type(self, concept: str, avatar_data: Dict[str, Any]) -> Dict[str, Any]:
        """Seleciona melhor tipo de prova para o conceito"""

        concept_lower = concept.lower()

        # Mapeia conceitos para tipos de prova
        if any(word in concept_lower for word in ['resultado', 'crescimento', 'melhoria', 'eficacia', 'performance', 'ganho']):
            return self.proof_types['antes_depois']
        elif any(word in concept_lower for word in ['concorrente', 'melhor', 'superior', 'diferencial', 'vantagem']):
            return self.proof_types['comparacao_competitiva']
        elif any(word in concept_lower for word in ['tempo', 'rapidez', 'velocidade', 'progressao', 'jornada']):
            return self.proof_types['timeline_resultados']
        elif any(word in concept_lower for word in ['outros', 'clientes', 'pessoas', 'social', 'depoimento', 'confianca', 'feedback']):
            return self.proof_types['social_proof_visual']
        elif any(word in concept_lower for word in ['processo', 'metodo', 'como funciona', 'passo a passo', 'etapas']):
            return self.proof_types['demonstracao_processo']
        else: # Default caso nenhum seja encontrado
            logger.warning(f"Nenhum tipo de prova correspondente encontrado para o conceito: '{concept}'. Usando 'Demonstra√ß√£o do Processo' como padr√£o.")
            return self.proof_types['demonstracao_processo']

    def _create_basic_prova(self, concept: str, segmento: str, produto: str) -> Dict[str, Any]:
        """Cria uma prova visual b√°sica como fallback"""
        # Tenta associar um tipo de prova baseada no conceito, se poss√≠vel
        proof_type_info = self._select_best_proof_type(concept, {}) # Avatar data n√£o √© essencial aqui

        # Garante que proof_type_info √© um dicion√°rio e tem as chaves esperadas
        if not isinstance(proof_type_info, dict) or not all(k in proof_type_info for k in ['nome', 'objetivo', 'impacto', 'facilidade']):
            logger.error(f"Erro ao obter informa√ß√µes do tipo de prova para o conceito '{concept}'. Usando defaults.")
            proof_type_info = {
                'nome': 'Prova Gen√©rica',
                'objetivo': 'Demonstrar valor',
                'impacto': 'M√©dio',
                'facilidade': 'M√©dia'
            }

        return {
            'nome': f'PROVI: {proof_type_info["nome"]} para {produto}',
            'conceito_alvo': concept,
            'tipo_prova': proof_type_info['nome'],
            'experimento': f'Demonstra√ß√£o visual focada em "{concept}" para o {produto} no segmento de {segmento}.',
            'materiais': [
                f'Gr√°ficos relevantes ({proof_type_info["nome"].lower()})',
                'Dados num√©ricos que suportam o conceito',
                'Screenshots de resultados ou interface',
                'Cita√ß√µes ou feedbacks curtos de clientes'
            ],
            'roteiro_completo': {
                'preparacao': f'Reunir dados e exemplos visuais que ilustrem o conceito "{concept}"',
                'execucao': f'Apresentar a prova de forma clara e concisa, conectando com os benef√≠cios para o cliente',
                'impacto_esperado': 'Aumento da percep√ß√£o de valor e confian√ßa no produto'
            },
            'metricas_sucesso': [
                f'Redu√ß√£o de obje√ß√µes relacionadas a "{concept}"',
                'Aumento de interesse e engajamento com a prova',
                f'Confirma√ß√£o de que "{concept}" √© um benef√≠cio chave percebido'
            ],
            'fallback_mode': True # Indica que √© uma prova de fallback
        }

    def _get_default_visual_proofs(self, context_data: Dict[str, Any]) -> List[Dict[str, Any]]:
        """Retorna provas visuais padr√£o como fallback geral"""

        segmento = context_data.get('segmento', 'neg√≥cios')
        produto = context_data.get('produto', 'produto')

        return [
            {
                'nome': f'PROVI 1: Resultados Comprovados em {segmento}',
                'conceito_alvo': f'Efic√°cia da metodologia em {segmento}',
                'tipo_prova': 'Antes/Depois',
                'experimento': f'Compara√ß√£o visual de resultados antes e depois da aplica√ß√£o da metodologia em {segmento}',
                'materiais': ['Gr√°ficos de crescimento', 'Dados de performance', 'Screenshots de m√©tricas'],
                'roteiro_completo': {
                    'preparacao': 'Organize dados de clientes que aplicaram a metodologia',
                    'execucao': 'Mostre transforma√ß√£o clara com n√∫meros espec√≠ficos',
                    'impacto_esperado': 'Convencimento atrav√©s de evid√™ncia visual'
                },
                'metricas_sucesso': ['Redu√ß√£o de ceticismo', 'Aumento de interesse']
            },
            {
                'nome': f'PROVI 2: Compara√ß√£o com Mercado em {segmento}',
                'conceito_alvo': f'Superioridade da abordagem em {segmento}',
                'tipo_prova': 'Compara√ß√£o Competitiva',
                'experimento': f'Compara√ß√£o visual entre abordagem tradicional e metodologia espec√≠fica para {segmento}',
                'materiais': ['Tabelas comparativas', 'Gr√°ficos de performance', 'Benchmarks do setor'],
                'roteiro_completo': {
                    'preparacao': 'Colete dados de mercado e benchmarks',
                    'execucao': 'Apresente compara√ß√£o lado a lado',
                    'impacto_esperado': 'Demonstra√ß√£o clara de vantagem competitiva'
                },
                'metricas_sucesso': ['Compreens√£o do diferencial', 'Justificativa de pre√ßo premium']
            },
            {
                'nome': f'PROVI 3: Depoimentos Visuais {segmento}',
                'conceito_alvo': f'Valida√ß√£o social no {segmento}',
                'tipo_prova': 'Prova Social Visual',
                'experimento': f'Compila√ß√£o visual de depoimentos de profissionais de {segmento}',
                'materiais': ['V√≠deos de depoimento', 'Screenshots de resultados', 'Fotos de clientes'],
                'roteiro_completo': {
                    'preparacao': 'Selecione melhores depoimentos com resultados',
                    'execucao': 'Apresente sequ√™ncia de valida√ß√µes sociais',
                    'impacto_esperado': 'Redu√ß√£o de risco percebido'
                },
                'metricas_sucesso': ['Aumento de confian√ßa', 'Redu√ß√£o de obje√ß√µes']
            }
        ]

    def _generate_fallback_visual_proof(self, conceito: str, contexto: Dict[str, Any]) -> Dict[str, Any]:
        """Gera prova visual de fallback quando IA falha ou n√£o retorna dados √∫teis"""

        fallback_definitions = {
            'Eficacia do produto': {
                'tipo': 'Compara√ß√£o Visual',
                'descricao': f'Demonstra√ß√£o pr√°tica da efic√°cia do {contexto.get("produto", "produto")}',
                'elementos': ['Antes vs Depois', 'M√©tricas de performance', 'Resultados mensur√°veis'],
                'impacto_psicologico': 'Alto - prova tang√≠vel de resultados'
            },
            'Credibilidade da empresa': {
                'tipo': 'Prova Social',
                'descricao': 'Evid√™ncias da credibilidade e autoridade da empresa',
                'elementos': ['Certifica√ß√µes', 'Depoimentos', 'Cases de sucesso'],
                'impacto_psicologico': 'Alto - constr√≥i confian√ßa imediata'
            },
            'Qualidade superior': {
                'tipo': 'Demonstra√ß√£o Comparativa',
                'descricao': 'Compara√ß√£o visual da qualidade superior',
                'elementos': ['Materiais premium', 'Processos diferenciados', 'Acabamento superior'],
                'impacto_psicologico': 'M√©dio-Alto - justifica valor premium'
            },
            'Urgencia de acao': {
                'tipo': 'Contagem Regressiva / Escassez',
                'descricao': 'Cria√ß√£o de senso de urg√™ncia para a a√ß√£o',
                'elementos': ['Timer visual', 'Ofertas limitadas', 'Notifica√ß√µes de estoque baixo'],
                'impacto_psicologico': 'Alto - impulsiona decis√£o r√°pida'
            },
            'Escassez temporal': {
                'tipo': 'Oferta Limitada Visual',
                'descricao': 'Evidencia√ß√£o de tempo ou quantidade limitada',
                'elementos': ['Datas de expira√ß√£o claras', 'Indicadores de poucas unidades'],
                'impacto_psicologico': 'Alto - FOMO (Fear Of Missing Out)'
            },
            'Prova social massiva': {
                'tipo': 'Compila√ß√£o de Depoimentos/Avalia√ß√µes',
                'descricao': 'Apresenta√ß√£o de grande volume de feedback positivo',
                'elementos': ['Gr√°ficos de satisfa√ß√£o', 'M√∫ltiplos depoimentos curtos', 'Selos de aprova√ß√£o'],
                'impacto_psicologico': 'Alto - valida√ß√£o em massa'
            },
            'Autoridade no mercado': {
                'tipo': 'Reconhecimento e Premia√ß√µes',
                'descricao': 'Demonstra√ß√£o de posi√ß√£o de lideran√ßa e reconhecimento',
                'elementos': ['Logos de parceiros importantes', 'Pr√™mios recebidos', 'Men√ß√µes na m√≠dia'],
                'impacto_psicologico': 'Alto - estabelece confian√ßa e credibilidade'
            },
            'Simplicidade do metodo': {
                'tipo': 'Infogr√°fico Passo a Passo',
                'descricao': 'Simplifica√ß√£o visual do processo ou m√©todo',
                'elementos': ['Fluxogramas', '√çcones explicativos', 'Listas numeradas'],
                'impacto_psicologico': 'M√©dio - facilita compreens√£o e ado√ß√£o'
            }
        }

        # Busca a defini√ß√£o espec√≠fica para o conceito
        definition = fallback_definitions.get(conceito)

        if definition:
            # Cria uma prova b√°sica estruturada com base na defini√ß√£o encontrada
            return {
                'nome': f'PROVI: {definition["tipo"]} sobre {conceito}',
                'conceito_alvo': conceito,
                'tipo_prova': definition['tipo'],
                'experimento': definition['descricao'],
                'materiais': definition['elementos'],
                'roteiro_completo': {
                    'preparacao': f'Coletar materiais visuais que representem {conceito}',
                    'execucao': f'Apresentar {definition["tipo"]} de forma clara e direta',
                    'impacto_esperado': f'{definition.get("impacto_psicologico", "M√©dio")} - {definition["descricao"]}'
                },
                'metricas_sucesso': [f'Compreens√£o de {conceito}', 'Engajamento com a prova'],
                'is_fallback': True,
                'fallback_reason': 'IA falhou ou n√£o retornou dados √∫teis'
            }
        else:
            # Caso gen√©rico se o conceito n√£o estiver mapeado
            logger.warning(f"Conceito de fallback n√£o mapeado: '{conceito}'. Usando prova gen√©rica.")
            return {
                'nome': f'PROVI: Prova Visual Gen√©rica para {conceito}',
                'conceito_alvo': conceito,
                'tipo_prova': 'Demonstra√ß√£o Geral',
                'experimento': f'Apresenta√ß√£o de evid√™ncias visuais para suportar o conceito de "{conceito}"',
                'materiais': ['Evid√™ncia tang√≠vel', 'Compara√ß√£o visual', 'Valida√ß√£o de terceiros'],
                'roteiro_completo': {
                    'preparacao': 'Reunir quaisquer dados visuais dispon√≠veis',
                    'execucao': 'Mostrar visualmente o ponto principal do conceito',
                    'impacto_esperado': 'Suporte visual ao argumento principal'
                },
                'metricas_sucesso': ['Clareza da mensagem', 'Percep√ß√£o de valor'],
                'is_fallback': True,
                'fallback_reason': 'Conceito n√£o mapeado ou erro desconhecido'
            }

# Inst√¢ncia global
visual_proofs_generator = VisualProofsGenerator()